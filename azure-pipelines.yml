trigger:
  - master
  # paths:
  #   include:
  #     - infra/*
  #     - app/src/*
  
pool:
    vmImage: ubuntu-latest
  
variables:
  - group: AttackLabPrismaCloudSE
  
stages:
    - stage: iac_validation
      condition: always()
      displayName: IaC Validate
      jobs:
        - job: iac_validation
          displayName:  IaC Validation
          steps:
          - bash: env
            displayName: Display Environment Variables
          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: '$(backendServiceAWS)'
              backendAWSBucketName: '$(projectName)'
              backendAWSKey: '$(backendAWSKey)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
          - task: TerraformTaskV4@4
            displayName: Terraform Validate
            inputs:
              provider: 'aws'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
    - stage: iac_scan
      condition: always()
      displayName: Code Scan
      dependsOn: iac_validation
      jobs:
        - job: security_gate
          displayName:  Checkov Scanning
          steps:
          - task: UsePythonVersion@0
            displayName: Instalacion Python
            inputs:
              versionSpec: '3.8'
          - script: pip install checkov
            displayName: Instalacion Checkov
          - script: |
              checkov --prisma-api-url $(PRISMA_CONSOLE) --bc-api-key $(PRISMA_TOKEN) -d . --repo-id $(System.TeamProject)/$(Build.Repository.Name) --branch $(Build.SourceBranchName) --use-enforcement-rules --compact --quiet
            displayName: Escaneo IaC
        # - job: sonar_scanning
        #   displayName:  SonarQube Scanning
        #   steps:
        #   - task: SonarQubePrepare@5
        #     inputs:
        #       SonarQube: 'davids-sonarqube'
        #       scannerMode: 'Other'
        #       extraProperties: |
        #         sonar.projectKey=$(projectName)
        #         sonar.projectName=$(projectName)
        #   - task: JavaToolInstaller@0
        #     inputs:
        #       versionSpec: '17'
        #       jdkArchitectureOption: 'x64'
        #       jdkSourceOption: 'PreInstalled'
        #   - task: Maven@4
        #     inputs:
        #       mavenPomFile: '$(appPath)/pom.xml'
        #       goals: 'install sonar:sonar'
        #       publishJUnitResults: true
        #       testResultsFiles: '**/surefire-reports/TEST-*.xml'
        #       javaHomeOption: 'JDKVersion'
        #       mavenVersionOption: 'Default'
        #       mavenAuthenticateFeed: false
        #       effectivePomSkip: false
        #       sonarQubeRunAnalysis: false
        #   - task: SonarQubePublish@5
        #     inputs:
        #       pollingTimeoutSec: '120'
        #   - task: SonarQubePrepare@5
        #     inputs:
        #       SonarQube: 'davids-sonarqube'
        #       scannerMode: 'CLI'
        #       configMode: 'manual'
        #       cliSources: '.'
        #       extraProperties: |
        #         sonar.exclusions=**/*.java
        #         sonar.coverage.exclusions=**/*.java
        #       cliProjectKey: $(projectName)
        #   - task: SonarQubeAnalyze@5
        #   - task: SonarQubePublish@5
        #     inputs:
        #       pollingTimeoutSec: '120'
    - stage: iac_deploy
      displayName: IaC Deploy
      dependsOn: 
        - iac_validation
        # - iac_scan
      jobs:
        - job: iac_deploy
          displayName:  Terraform Apply
          steps:
          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: '$(backendServiceAWS)'
              backendAWSBucketName: '$(projectName)'
              backendAWSKey: '$(backendAWSKey)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
          - task: TerraformTaskV4@4
            displayName: Terraform Apply
            inputs:
              provider: 'aws'
              command: 'apply'
              environmentServiceNameAWS: '$(backendServiceAWS)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
              commandOptions: '-refresh=false'
          - bash: |
              echo "##vso[task.setvariable variable=clusterName;isOutput=true]$(terraform -chdir=$(System.DefaultWorkingDirectory)/$(infraPath) output -raw cluster_name)"
            name: terraformVariables
    - stage: docker_build
      condition: always()
      dependsOn: 
        - iac_validation
        # - iac_scan
      displayName: Docker Build
      jobs:
        # - job: check_app_changes
        #   displayName: 'Check changes'
        #   steps:
        #     - checkout: self
        #       fetchDepth: 2
        #     - bash: |
        #         PATH_FILTER=$(appPath)/
        #         CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
        #         MATCH_COUNT=0

        #         echo "Checking for file changes..."
        #         for FILE in $CHANGED_FILES
        #         do
        #           if [[ $FILE == *$PATH_FILTER* ]]; then
        #             echo "MATCH:  ${FILE} changed"
        #             MATCH_COUNT=$(($MATCH_COUNT+1))
        #           else
        #             echo "IGNORE: ${FILE} changed"
        #           fi
        #         done
        #         echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
        #         if [[ $MATCH_COUNT -gt 0 ]]; then
        #           echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
        #         else
        #           echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
        #         fi
        #       name: check_app_changes
        #       displayName: 'Check changed files'
        - job: docker_build
          # dependsOn: check_app_changes
          # condition: eq(dependencies.check_app_changes.outputs['check_app_changes.SOURCE_CODE_CHANGED'], 'true')
          displayName: Docker Build
          steps:
          - task: Docker@2
            displayName: dockerBuild
            inputs:
              containerRegistry: docker-svengoechea-sc
              repository: $(imageName)
              command: build
              Dockerfile: '$(appPath)/Dockerfile'
              tags: $(imageTag)
          - task: Bash@3
            displayName: Save Docker Image
            inputs:
              targetType: 'inline'
              script: docker save -o $(Pipeline.Workspace)/image.tar $(imageName):$(imageTag)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)/image.tar'
              artifact: 'myArtifact'
              publishLocation: 'pipeline'
    - stage: docker_image_scan
      displayName: Image Scan (Prisma)
      dependsOn: docker_build
      # condition:  eq(dependencies.docker_build.outputs['check_app_changes.check_app_changes.SOURCE_CODE_CHANGED'], 'true')
      jobs:
        - job: Scan
          displayName: Image Scan (Prisma)
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'myArtifact'
              targetPath: '$(Pipeline.Workspace)'
          - bash: |
              docker load --input '$(Pipeline.Workspace)/image.tar'
            displayName: 'dockerLoadImage'
          - task: PrismaCloud.build-release-task.custom-build-release-task.prisma-cloud-compute-scan@3
            displayName: prismaCloudScan
            inputs:
              twistlockService: prismaCloud-svengoechea-sc
              artifact: $(imageName):$(imageTag)
    - stage: docker_push
      displayName: Docker Push
      dependsOn: 
        - docker_build
        - docker_image_scan
      # condition:  eq(dependencies.docker_build.outputs['check_app_changes.check_app_changes.SOURCE_CODE_CHANGED'], 'true')
      jobs:
        - job: docker_push
          displayName: Docker Push
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'myArtifact'
              targetPath: '$(Pipeline.Workspace)'
          - bash: |
              docker load --input '$(Pipeline.Workspace)/image.tar'
            displayName: 'dockerLoadImage'
          - task: Docker@2
            displayName: dockerPush
            inputs:
              containerRegistry: docker-svengoechea-sc
              repository: $(imageName)
              command: push
              tags: $(imageTag)
    - stage: app_deployment
      displayName: Application Deploy
      dependsOn: 
        - iac_deploy
        - docker_push
      condition: always()
      variables:
            - name: clusterName
              value: $[stageDependencies.iac_deploy.iac_deploy.outputs['terraformVariables.clusterName']]
      jobs:
        - job: app_deployment
          displayName: Application Deploy
          steps:
          - bash: aws eks update-kubeconfig --name $(clusterName)
            displayName: "Update Kube Config"
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in **/*
            inputs:
              rootDirectory: $(System.DefaultWorkingDirectory)
              targetFiles: '$(k8sPath)/app.yaml'
              keepToken: true
              tokenPrefix: __
              tokenSuffix: __
          - bash: kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/app.yaml
            displayName: "Deploying Spring Application"
          - bash: kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/priv-pod.yaml
            displayName: "Deploying Nginx Application"
          - bash: kubectl get svc -A | grep elb | awk '{print $5}'
            displayName: URL to Attack
    - stage: defender_deployment
      displayName: Apply Defender (Prisma)
      dependsOn: 
        - iac_deploy
      condition: always()
      variables:
            - name: clusterName
              value: $[stageDependencies.iac_deploy.iac_deploy.outputs['terraformVariables.clusterName']]
      jobs:
        - job: defender_deployment
          displayName: Prisma Cloud Defender Deployment
          steps:
          - bash: aws eks update-kubeconfig --name $(clusterName)
            displayName: "Update Kube Config"
          - bash: |
              if [[ $(kubectl get ns | grep prismacloud | awk '{print $1}') != 'prismacloud' ]]
              then
                kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/daemonset.yaml && kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/webhook.yaml
              else
                echo "Prisma Cloud Namespace already exists, not deploying again!"
              fi
            displayName: "Deploying Prisma Cloud Defender"